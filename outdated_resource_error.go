// Code generated by http://github.com/genesor/errorz (v1.0.0). DO NOT EDIT.

package errorz

import (
	"fmt"
	"net/http"
)

// OutdatedResourceError is used when the state of a resource does not allow to apply a specific action.
type OutdatedResourceError struct {
	*ErrorWithKey
}

// NewOutdatedResourceError is used when the state of a resource does not allow to apply a specific action.
func NewOutdatedResourceError(code, key string) error {
	return WrapWithOutdatedResourceError(nil, code, key)
}

// NewOutdatedResourceErrorf is used when the state of a resource does not allow to apply a specific action.
func NewOutdatedResourceErrorf(code, key string, args ...any) error {
	return WrapWithOutdatedResourceErrorf(nil, code, key, args...)
}

// WrapWithOutdatedResourceError is used when the state of a resource does not allow to apply a specific action.
func WrapWithOutdatedResourceError(err error, code, key string) error {
	return NewError[OutdatedResourceError](code, key, http.StatusConflict, err)
}

// WrapWithOutdatedResourceErrorf is used when the state of a resource does not allow to apply a specific action.
func WrapWithOutdatedResourceErrorf(err error, code, key string, args ...any) error {
	return NewError[OutdatedResourceError](code, fmt.Sprintf(key, args...), http.StatusConflict, err)
}

// IsOutdatedResourceError identifies an error as an OutdatedResourceError.
func IsOutdatedResourceError(err error) bool {
	return Is[OutdatedResourceError](err)
}

// AsOutdatedResourceError tries to cast an error as an OutdatedResourceError.
func AsOutdatedResourceError(err error) (*OutdatedResourceError, bool) {
	return As[OutdatedResourceError](err)
}

// Is is used by the standard "errors" package to identify an error as OutdatedResourceError.
func (e *OutdatedResourceError) Is(err error) bool {
	_, ok := err.(*OutdatedResourceError)
	return ok
}

// As is used by the standard "errors" package to identify an error as OutdatedResourceError.
func (e *OutdatedResourceError) As(err interface{}) bool {
	err2, ok := err.(*OutdatedResourceError)
	if ok {
		*err2 = *e
	}
	return ok
}

// Unwrap is used by the standard "errors" package to dive into the error chain.
func (e *OutdatedResourceError) Unwrap() error {
	return e.ErrorWithKey
}
