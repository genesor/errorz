// Code generated by http://github.com/genesor/errorz (v1.0.0). DO NOT EDIT.

package errorz

import (
	"fmt"
	"net/http"
)

// InvalidDataError is used when an invalid data is detected during an action.
type InvalidDataError struct {
	*ErrorWithKey
}

// NewInvalidDataError is used when an invalid data is detected during an action.
func NewInvalidDataError(code, key string) error {
	return WrapWithInvalidDataError(nil, code, key)
}

// NewInvalidDataErrorf is used when an invalid data is detected during an action.
func NewInvalidDataErrorf(code, key string, args ...any) error {
	return WrapWithInvalidDataErrorf(nil, code, key, args...)
}

// WrapWithInvalidDataError is used when an invalid data is detected during an action.
func WrapWithInvalidDataError(err error, code, key string) error {
	return NewError[InvalidDataError](code, key, http.StatusUnprocessableEntity, err)
}

// WrapWithInvalidDataErrorf is used when an invalid data is detected during an action.
func WrapWithInvalidDataErrorf(err error, code, key string, args ...any) error {
	return NewError[InvalidDataError](code, fmt.Sprintf(key, args...), http.StatusUnprocessableEntity, err)
}

// IsInvalidDataError identifies an error as an InvalidDataError.
func IsInvalidDataError(err error) bool {
	return Is[InvalidDataError](err)
}

// AsInvalidDataError tries to cast an error as an InvalidDataError.
func AsInvalidDataError(err error) (*InvalidDataError, bool) {
	return As[InvalidDataError](err)
}

// Is is used by the standard "errors" package to identify an error as InvalidDataError.
func (e *InvalidDataError) Is(err error) bool {
	_, ok := err.(*InvalidDataError)
	return ok
}

// As is used by the standard "errors" package to identify an error as InvalidDataError.
func (e *InvalidDataError) As(err interface{}) bool {
	err2, ok := err.(*InvalidDataError)
	if ok {
		*err2 = *e
	}
	return ok
}

// Unwrap is used by the standard "errors" package to dive into the error chain.
func (e *InvalidDataError) Unwrap() error {
	return e.ErrorWithKey
}
