// Code generated by http://github.com/genesor/errorz (v1.0.0). DO NOT EDIT.

package errorz

import (
	"errors"
	"fmt"
	"net/http"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestNotFoundError(t *testing.T) {
	t.Run("AsErrorz", func(t *testing.T) {
		err, isErrorz := AsErrorz(NewNotFoundError("code", "key"))
		require.True(t, isErrorz)

		assert.EqualError(t, err, "key")
		assert.Equal(t, "key", err.Key)
		assert.Equal(t, "code", err.Code)
		assert.Nil(t, err.Cause)
		assert.Equal(t, http.StatusNotFound, err.HTTPCode)
	})

	t.Run("no code", func(t *testing.T) {
		err := NewNotFoundError("", "some error content")
		require.EqualError(t, err, "some error content")

		res := errors.Is(err, &NotFoundError{})
		require.True(t, res)

		err2 := fmt.Errorf("wrap2: %w", fmt.Errorf("wrap1: %w", err))
		res = errors.Is(err2, &NotFoundError{})
		require.True(t, res)

		res = IsNotFoundError(err2)
		require.True(t, res)

		err3, ok := AsNotFoundError(err)
		require.True(t, ok)
		require.Equal(t, "some error content", err3.Key)

		err4, ok := AsNotFoundError(err2)
		require.True(t, ok)
		require.Equal(t, "some error content", err4.Key)

		err5, ok := AsNotFoundError(fmt.Errorf("not a NotFoundError"))
		require.False(t, ok)
		require.Nil(t, err5)

		err6 := errors.New("base error")
		err7 := WrapWithNotFoundError(err6, "", "some error content")
		require.EqualError(t, err7, "some error content: base error")

		require.True(t, errors.Is(err7, &NotFoundError{}))
		require.True(t, errors.Is(err7, &NotFoundError{}))
		require.True(t, IsNotFoundError(err7))

		err8, ok := AsNotFoundError(err7)
		require.True(t, ok)
		require.Equal(t, "some error content", err8.Key)

		err9 := new(NotFoundError)
		require.True(t, errors.As(err7, err9))
		require.Equal(t, "some error content", err9.Key)
	})

	t.Run("with code", func(t *testing.T) {
		err, ok := AsNotFoundError(NewNotFoundError("awesome_code", "error"))
		require.True(t, ok)
		require.Equal(t, "awesome_code", err.Code)
	})

	t.Run("with formatting", func(t *testing.T) {
		err, ok := AsNotFoundError(NewNotFoundErrorf("", "error %d", 1))
		require.True(t, ok)
		require.Empty(t, err.Code)
		require.Equal(t, "error 1", err.Key)

		err2, ok := AsNotFoundError(WrapWithNotFoundErrorf(err, "", "error %d", 2))
		require.True(t, ok)
		require.Empty(t, err2.Code)
		require.Equal(t, "error 2", err2.Key)
		require.Equal(t, err, err2.Cause)
	})
}
