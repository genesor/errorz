// Code generated by http://github.com/genesor/errorz (v1.0.0). DO NOT EDIT.

package errorz

import (
	"fmt"
	"net/http"
)

// NotFoundError is used when we cannot find a specified resource.
type NotFoundError struct {
	*ErrorWithKey
}

// NewNotFoundError is used when we cannot find a specified resource.
func NewNotFoundError(code, key string) error {
	return WrapWithNotFoundError(nil, code, key)
}

// NewNotFoundErrorf is used when we cannot find a specified resource.
func NewNotFoundErrorf(code, key string, args ...any) error {
	return WrapWithNotFoundErrorf(nil, code, key, args...)
}

// WrapWithNotFoundError is used when we cannot find a specified resource.
func WrapWithNotFoundError(err error, code, key string) error {
	return NewError[NotFoundError](code, key, http.StatusNotFound, err)
}

// WrapWithNotFoundErrorf is used when we cannot find a specified resource.
func WrapWithNotFoundErrorf(err error, code, key string, args ...any) error {
	return NewError[NotFoundError](code, fmt.Sprintf(key, args...), http.StatusNotFound, err)
}

// IsNotFoundError identifies an error as an NotFoundError.
func IsNotFoundError(err error) bool {
	return Is[NotFoundError](err)
}

// AsNotFoundError tries to cast an error as an NotFoundError.
func AsNotFoundError(err error) (*NotFoundError, bool) {
	return As[NotFoundError](err)
}

// Is is used by the standard "errors" package to identify an error as NotFoundError.
func (e *NotFoundError) Is(err error) bool {
	_, ok := err.(*NotFoundError)
	return ok
}

// As is used by the standard "errors" package to identify an error as NotFoundError.
func (e *NotFoundError) As(err interface{}) bool {
	err2, ok := err.(*NotFoundError)
	if ok {
		*err2 = *e
	}
	return ok
}

// Unwrap is used by the standard "errors" package to dive into the error chain.
func (e *NotFoundError) Unwrap() error {
	return e.ErrorWithKey
}
